# def area(vertices):
#     n = len(vertices)
#     total_area = 0
#     for i in range(n):
#         x1, y1 = vertices[i]
#         x2, y2 = vertices[(i + 1) % n]
#         total_area += (x1 * y2 - x2 * y1)
#     return abs(total_area) / 2

# vertices = [(1, 1), (7, 1), (7, 4), (5, 4), (5, 2), (2, 2), (2, 7), (5, 7), (5, 5), (7, 5), (7, 8), (1, 8)]
# # vertices = [(2, 4), (2, 5), (0, 5), (0, 6), (2, 6), (2, 7), (0, 7), (0, 8), (4, 8), (4, 9), (0, 9), (0, 10), (3, 10), (3, 11), (0, 11), (0, 12), (3, 12), (3, 13), (0, 13), (0, 14), (2, 14), (2, 15), (0, 15), (0, 19), (1, 19), (1, 16), (2, 16), (2, 18), (3, 18), (3, 17), (4, 17), (4, 16), (3, 16), (3, 15), (4, 15), (4, 14), (5, 14), (5, 15), (6, 15), (6, 19), (8, 19), (8, 18), (7, 18), (7, 17), (9, 17), (9, 16), (7, 16), (7, 14), (8, 14), (8, 15), (9, 15), (9, 12), (8, 12), (8, 13), (7, 13), (7, 12), (6, 12), (6, 11), (9, 11), (9, 10), (7, 10), (7, 9), (9, 9), (9, 8), (6, 8), (6, 10), (5, 10), (5, 6), (6, 6), (6, 7), (9, 7), (9, 5), (8, 5), (8, 6), (7, 6), (7, 5), (6, 5), (6, 4), (7, 4), (7, 2), (6, 2), (6, 3), (5, 3), (5, 5), (4, 5), (4, 7), (3, 7), (3, 4), (4, 4), (4, 0), (3, 0), (3, 3), (2, 3), (2, 1), (0, 1), (0, 2), (1, 2), (1, 3), (0, 3), (0, 4)]
# print("Площадь фигуры:", area(vertices))

def find_minimum_sum(matrix):
    n = len(matrix)
    m = len(matrix[0])
    
    dp = [[0] * m for _ in range(n)]
    
    # Инициализация первой строки и первого столбца
    dp[0][0] = matrix[0][0]
    for i in range(1, n):
        dp[i][0] = dp[i-1][0] + matrix[i][0]
    for j in range(1, m):
        dp[0][j] = dp[0][j-1] + matrix[0][j]
    
    # Вычисление остальных значений
    for i in range(1, n):
        for j in range(1, m):
            # Выбираем минимальное значение из верхней и левой ячеек
            min_sum = min(dp[i-1][j], dp[i][j-1])
            
            # Проверяем, нужно ли повернуть
            if (i + j) % 3 == 0:
                # Нужно повернуть, берем значение из верхней ячейки
                dp[i][j] = min_sum + matrix[i][j]
            else:
                # Не нужно повернуть, берем значение из левой ячейки
                dp[i][j] = min_sum + matrix[i][j]
    
    # Возвращаем значение в правом нижнем углу
    return dp[n-1][m-1]

# Пример использования
matrix = [
    [2, 4, 1, 3],
    [3, 2, 1, 5],
    [5, 3, 2, 1]
]
print(find_minimum_sum(matrix))  # Выведет минимальную сумму пути
